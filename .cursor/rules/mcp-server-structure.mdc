---
alwaysApply: true
---

# MCP Tavily Search Server Structure

## Project Overview
This is an MCP (Model Context Protocol) server that provides web search capabilities through Tavily API integration. The server is containerized with Docker and exposes search tools for OpenWebUI.

## Key Files
- [server.py](mdc:server.py) - Main MCP server implementation with FastMCP
- [docker-compose.yml](mdc:docker-compose.yml) - Container orchestration for MCP server and MCPO proxy
- [Dockerfile](mdc:Dockerfile) - Container definition for the MCP server
- [requirements.txt](mdc:requirements.txt) - Python dependencies
- [nginx.conf](mdc:nginx.conf) - Nginx configuration for authentication (currently unused)

## Architecture
```
OpenWebUI â†’ Port 18000 â†’ MCPO (port 8001) â†’ MCP-Tavily (port 8000/mcp)
```

## Container Services
1. **mcp-tavily**: The main MCP server running FastMCP with Tavily tools
2. **mcpo**: MCP OpenAPI Proxy that converts MCP protocol to REST API
3. **nginx-auth**: Authentication layer (currently disabled for simplicity)

## Environment Variables
- `TAVILY_API_KEY`: Required for Tavily API access
- `MCP_HOST`: Server host (default: 0.0.0.0)
- `MCP_PORT`: Server port (default: 8000)

## Enhanced Tool Arsenal (Phase 1 & 2 Complete)
- **Core Search**: `tavily_search`, `smart_search`, `qna_search`, `detailed_news_search`
- **Context & Utility**: `get_search_context`, `get_current_date`, `tavily_health_check`  
- **Content Extraction**: `tavily_extract`, `tavily_crawl`, `tavily_map`

## Robustness Features
- âœ… **Parameter validation** with `TavilyValidationError`
- âœ… **3-tier fallback system** for graceful degradation
- âœ… **Smart retry logic** with exponential backoff
- âœ… **Dynamic timeout calculation** based on complexity
- âœ… **Health monitoring** and API diagnostics
- âœ… **Credit optimization** and quota management

## Deployment
Deploy through Portainer using the docker-compose.yml configuration. The stack exposes port 18000 for OpenWebUI connections.

## Architecture Status
- **Phase 1**: âœ… Critical missing features implemented
- **Phase 2**: âœ… Robustness & error handling complete
- **Phase 3**: ðŸš€ Ready for performance & specialization