---
globs: *.py
---

# Tavily API Implementation Patterns

## Tool Function Structure
All Tavily MCP tools should follow this robust pattern:

```python
@mcp.tool()
def tool_name(
    query: str,
    # ... other parameters with proper typing
) -> dict:
    """
    Clear description with current date context.
    
    IMPORTANT DATE CONTEXT: Today's date is {today}
    
    Usage guidelines and parameter explanations.
    """.format(today=date.today().isoformat())
    
    # 1. Parameter validation first
    try:
        validate_search_params(param1, param2, param3, param4, param5)
    except TavilyValidationError as e:
        return {
            "error": f"Parameter validation error: {str(e)}",
            "error_type": "ValidationError",
            "fix_suggestion": "Check the parameter requirements in the error message above"
        }
    
    # 2. Use robust search with fallback strategies
    return robust_tavily_search_with_fallback(search_params)
```

## Required Error Handling
- Use `robust_tavily_search_with_fallback()` for all search operations
- Implement parameter validation with `validate_search_params()`
- Use custom `TavilyValidationError` for validation failures
- Provide 3-tier fallback strategy: original → reduced complexity → minimal
- Include exponential backoff retry for timeout errors
- Return structured error responses with specific error type classification

## Parameter Guidelines
- Use proper type hints with Literal types for enums
- Include comprehensive docstrings with date context and emoji indicators
- Validate ALL parameter combinations using `validate_search_params()`
- Use `calculate_optimal_timeout()` for dynamic timeout calculation
- Support auto_parameters=True for AI-optimized searches
- Include all 6 topic types: general, news, finance, health, scientific, travel
- Enable visual content with include_image_descriptions and include_favicon

## Response Processing
- Clean and structure API responses before returning
- Add helpful metadata (like extraction_note for failed URLs, _fallback_used indicators)
- Include debugging information and troubleshooting steps in error responses
- Format dates and times consistently using date.today().isoformat()
- Detect and handle quota/credit limit errors specifically
- Provide actionable suggestions for different error types
- Include health check capabilities for API diagnostics